<?php
/* This file is part of the XP framework
 *
 * $Id$
 */

/**
 * The lang package contains the core classes of the XP framework.
 *
 * Basics
 * ======
 * This includes the Object class from which all other classes extend 
 * and the Throwable class from which all exceptions and errors extend.
 * Both of these classes implement the Generic interface.
 *
 * Methods available in all objects and defined via the Generic
 * interface are:
 * <ul>
 *   <li>public string hashCode()</li>
 *   <li>public bool equals(lang.Object cmp)</li>
 *   <li>public string getClassName()</li>
 *   <li>public lang.XPClass getClass()</li>
 *   <li>public string toString()</li>
 * </ul>
 *
 * Note: getClassName() is not only a shorthand for getClass()->getName() 
 * but also significantly faster than the latter.
 *
 * Classes and reflection
 * ======================
 * Every object has an XPClass instance associated with it, providing
 * reflective information about the runtime class. This includes a fully
 * qualified class name (e.g. "util.Date"), annotations support, class
 * fields,  methods, constructors and their modifiers as well as methods 
 * to dynamically access these.
 *
 * Class loading
 * =============
 * The lang package contains the default classloader class which takes 
 * care of loading classes from the file system. Loading classes from 
 * archive files (xars) is supported by the lang.archive package.
 *
 * Process control
 * ===============
 * The Process and Thread classes implement process execution and 
 * control. They are complemented with the System class which provides
 * information about the underlying operating system.
 *
 * Chained exceptions
 * ==================
 * All exceptions in the framework can optionally have a cause.
 *
 * Example (abbreviated):
 * <code>
 *   class FinderException extends XPException { }
 *   
 *   class NewsFinder extends Finder {
 *     public function findByPK($pk) {
 *       try {
 *         $r= $this->conn->query('select * from news where news_id= %d', $pk)->next();
 *       } catch (SQLException $e) {
 *         throw new FinderException('Error while finding news id #'.$pk, $e);
 *       }
 *       if (FALSE === $r) {
 *         throw new FinderException(
 *           'News id #'.$pk.' does not exist', 
 *           new ElementNotFoundException($pk)
 *         );
 *       }
 *       return $r;
 *     }
 *   }
 *   
 *   $news= new NewsFinder();
 *   try {
 *     $news->findByPK(10250);
 *   } catch (FinderException $e) {
 *     Console::writeLine('*** ', $e->getMessage(), ' caused by: ', $e->getCause());
 *   }
 * </code>
 *
 * Classes loaded per default
 * ==========================
 * These classes are guaranteed to be loaded at any given time:
 *
 * lang.Object, lang.StackTraceElement, lang.Throwable, lang.Error, 
 * lang.XPException, lang.Type, lang.reflect.Routine, lang.reflect.Parameter, 
 * lang.reflect.TargetInvocationException, lang.reflect.Method, 
 * lang.reflect.Field, lang.reflect.Constructor, lang.reflect.Modifiers, 
 * lang.reflect.Package, lang.XPClass, lang.FileSystemClassLoader, 
 * lang.DynamicClassLoader, lang.archive.ArchiveClassLoader, lang.ClassLoader
 *
 * These exceptions are guaranteed to be loaded at any given time:
 *
 * lang.NullPointerException, lang.IllegalAccessException, 
 * lang.IllegalArgumentException, lang.IllegalStateException, 
 * lang.FormatException, lang.ClassNotFoundException
 * 
 * @see      http://news.xp-framework.net/article/11/2004/11/23/
 * @see      xp://lang.Throwable
 * @see      xp://lang.Object
 * @see      xp://lang.Generic
 * @see      xp://lang.XPClass
 * @see      xp://lang.Process
 * @purpose  Core
 */
package lang {
}
